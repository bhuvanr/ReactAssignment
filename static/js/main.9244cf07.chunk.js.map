{"version":3,"sources":["Components/todohead.js","Components/todoInput.js","Components/todoRows.js","Containers/todolist.js","App.js","registerServiceWorker.js","index.js"],"names":["TodoHead","react_default","a","createElement","className","style","marginRight","TodoInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","name","target","value","setState","defineProperty","resetState","todo","time","state","_this2","textAlign","type","placeholder","onChange","min","trim","Number","title","disabled","variant","onClick","props","submitNote","color","React","Component","getFormatTime","timiInMilliseconds","Date","toISOString","substr","todoRows","element","estTime","notes","index","startTime","width","start","endTime","end","ToDoList","newNote","concat","toConsumableArray","getTimeMilli","getTime","map","el","i","assign","alert","getEstAvg","totalEst","reduce","total","current","console","log","Math","round","length","getTotAvg","todos","slice","count","sumTotal","Components_todoRows","key","todoInput","marginTop","todohead","marginBottom","App","todolist","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9244cf07.chunk.js","sourcesContent":["import React from 'react'\n\nconst TodoHead = () => {\n    return (\n        <thead >\n            <tr >\n                <th> <span className=\"icon-question-circle1\" style={{ marginRight: \"2px\" }} />ToDo</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />Estimated Time(minutes)</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />Start Time(HH:MM:SS)</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />End Time(HH:MM:SS)</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />Total Time(HH:MM:SS)</th>\n            </tr>\n        </thead>\n    )\n}\n\nexport default TodoHead;","import React from 'react'\n\n\nclass TodoInput extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            todo: '',\n            time: ''\n        }\n    }\n\n\n    //On Handling Input Boxes\n    handleInput = (e) => {\n        let name = e.target.name;\n        let value = e.target.value;\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    //reset States on SubmitTodo\n    resetState = () => {\n        this.setState({\n            todo: '',\n            time : ''\n        })\n    }\n    \n    render() {\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <div className=\"form-group row\" >\n                    <label className=\"col-sm-3 col-form-label\">Todo :  </label>\n                    <div className=\"col-sm-6\">\n                        <input className=\"form-control\" type=\"text\" name=\"todo\" placeholder=\"Add Todo\" onChange={(e) => { this.handleInput(e) }} value={this.state.todo} />\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <label className=\"col-sm-3 col-form-label\">Estimated Time (minutes) : </label>\n                    <div className=\"col-sm-6\">\n                        <input className=\"form-control\" type=\"number\" min=\"0\" name=\"time\" placeholder=\"Estimated time\" onChange={(e) => { this.handleInput(e) }} value={this.state.time} />\n                    </div>\n                </div>\n                {this.state.todo.trim() === '' || this.state.time.trim() === '' || Number(this.state.time.trim()) <= 0 ?\n                    <button title=\"Please add todo and valid estimated time\" disabled className=\"btn btn-lg\" type=\"button\" variant=\"contained\" >\n                        Submit\n                                    </button>\n                    : <button onClick={(e)=>{this.props.submitNote(e,this.state.todo, this.state.time); this.resetState();}} className=\"btn btn-primary btn-lg\" type=\"button\" variant=\"contained\" color=\"primary\">\n                        Submit\n                    </button>\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default TodoInput;","import React from 'react'\n\n\nconst todoRows = (props) => {\n\n    return(\n        <tr>\n                    \n        <td style={{ textAlign: \"center\" }}>{props.element.todo}</td>\n\n        <td style={{ textAlign: \"center\" }}>{props.element.estTime}</td>\n\n        {\n        props.notes[props.index].startTime === 0 ? \n        <td style={{ textAlign: \"center\" }}>\n             <div style={{ width: \"100%\" }}>\n                <button name={props.index} className=\"btn btn-primary btn-sm\" type=\"button\" variant=\"contained\" color=\"primary\" onClick={(e) => props.start(e)}>Start</button>\n            </div>\n        </td> \n        : \n        <td style={{ textAlign: \"center\" }}>{getFormatTime(props.notes[props.index].startTime)}</td>\n        }\n\n        {\n        props.notes[props.index].endTime === 0 ? \n        <td style={{ textAlign: \"center\" }}>\n            <div style={{ width: \"100%\" }}> \n                <button name={props.index} className=\"btn btn-primary btn-sm\" type=\"button\" variant=\"contained\" color=\"primary\" onClick={(e) => props.end(e)}>End</button> \n            </div>\n        </td> \n        : \n        <td style={{ textAlign: \"center\" }}>{getFormatTime(props.notes[props.index].endTime)}</td>\n        }\n\n        {\n        props.notes[props.index].endTime !== 0 ? \n        <td style={{ textAlign: \"center\" }}>{getFormatTime(props.notes[props.index].endTime - props.notes[props.index].startTime)}</td> \n        : \n        <td style={{ textAlign: \"center\" }}>--:--:--</td>\n        }\n\n    </tr>\n    )\n}\n\n//Getting Current time in format HH:MM:SS\nconst getFormatTime = (timiInMilliseconds) => {\n    return new Date(timiInMilliseconds).toISOString().substr(11,8)\n}\n\n\nexport default todoRows;","import React from 'react'\nimport '../Styles/App.css'\nimport TodoHead from '../Components/todohead'\nimport TodoInput from '../Components/todoInput'\nimport TodoRows from '../Components/todoRows'\n\nclass ToDoList extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            notes: [],\n        }\n    }\n\n    //Onclicking Submit Button\n    submitNote = (e,todo,time) => {\n        let newNote = {\n            todo: todo,\n            estTime: time,\n            startTime: 0,\n            endTime: 0\n        }\n        this.setState({\n            notes : [...this.state.notes, newNote]\n        })\n    }\n\n    //Getting current time in milliseconds\n    getTimeMilli = () => {\n        var d = new Date();\n        return d.getTime();\n    }\n\n\n    //Onclick Of starting a ToDO\n    start = (e) => {\n        let time = this.getTimeMilli();\n        this.setState({\n            notes: this.state.notes.map((el, i) => (i == e.target.name ? Object.assign({}, el, { startTime: time }) : el))\n        })\n    }\n\n    //Onclick of ending the ToDO\n    end = (e) => {\n        let time = this.getTimeMilli();\n        if (this.state.notes[e.target.name].startTime != 0) {\n            this.setState({\n                notes: this.state.notes.map((el, i) => (i == e.target.name ? Object.assign({}, el, { endTime: time }) : el))\n            })\n        }\n        else {\n            alert(\"Please Start the task first\")\n        }\n    }\n\n\n    //get estimated time average\n    getEstAvg = () =>{\n       let totalEst =  this.state.notes.reduce((total, current)=> {\n           console.log(total,current.estTime)\n             return total + Number(current.estTime); \n            }, 0)\n        return Math.round(totalEst/this.state.notes.length*100)/100\n    \n    }\n\n    //get total time average\n    getTotAvg = () =>{\n        let todos = this.state.notes.slice();\n        let count = 0;\n        let sumTotal = 0;\n      for(var i=0; i<todos.length; i++){\n          if(todos[i].endTime !== 0){\n              count = count + 1;\n              sumTotal = sumTotal + (todos[i].endTime-todos[i].startTime)\n          }\n      }\n      if(count != 0){\n          console.log(count, sumTotal, (sumTotal/count)/60000)\n        return Math.round(((sumTotal/count)/60000)*100)/100\n      }\n    }\n\n\n    render() {\n        const todo = this.state.notes.map((element, index) => {\n            return (\n                <TodoRows key = {index} \n                element = {element} \n                index={index} \n                notes={this.state.notes} \n                start={(e)=>{this.start(e)}} \n                end ={(e)=>{this.end(e)}}\n                />\n            )\n        })\n\n        return (\n            <div className=\"container\">\n                <div className=\"scores-block1 clearfix\">\n                    <div className=\"bg-white shadow-sm Assessment_Results\">\n                        <TodoInput submitNote = {(e,todo,time)=>this.submitNote(e,todo,time)}/>\n                        {\n                        this.state.notes.length !== 0 && \n                        <div>\n                        <table className=\"table\" style={{ marginTop: \"2rem\" }}>\n                           <TodoHead />\n                            <tbody >\n                                {todo}\n                            </tbody>\n                        </table>\n                        <div style={{textAlign : \"center\"}}> Average Estimated Time(minutes) : {this.getEstAvg()}</div>\n                        {this.getTotAvg() != null && <div style={{textAlign : \"center\", marginBottom : \"4rem\", marginTop : \"1rem\"}}> Average Total Time(minutes) : {this.getTotAvg()}</div>}\n                        {this.getTotAvg() != null && <div style={{textAlign : \"center\", marginBottom : \"4rem\", marginTop : \"1rem\"}}> Deviation(minutes) : {this.getTotAvg() - this.getEstAvg()}</div>}                        \n                        </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ToDoList;","import React, { Component } from 'react';\nimport ToDoList from './Containers/todolist'\n\nclass App extends Component {\n  render() {\n    return (\n      <ToDoList/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//to make the app work offline\nserviceWorker.register();\n"],"sourceRoot":""}